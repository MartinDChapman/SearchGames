private static class AnnotationDeclarationVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(AnnotationDeclaration n, Object arg) {

      n.setComment(new LineComment("AnnotationDeclaration"));

  }

}

private static class AnnotationMemberDeclarationVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(AnnotationMemberDeclaration n, Object arg) {

      n.setComment(new LineComment("AnnotationMemberDeclaration"));

  }

}

private static class ArrayAccessExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ArrayAccessExpr n, Object arg) {

      n.setComment(new LineComment("ArrayAccessExpr"));

  }

}

private static class ArrayCreationExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ArrayCreationExpr n, Object arg) {

      n.setComment(new LineComment("ArrayCreationExpr"));

  }

}

private static class ArrayInitializerExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ArrayInitializerExpr n, Object arg) {

      n.setComment(new LineComment("ArrayInitializerExpr"));

  }

}

private static class AssertStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(AssertStmt n, Object arg) {

      n.setComment(new LineComment("AssertStmt"));

  }

}

private static class AssignExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(AssignExpr n, Object arg) {

      n.setComment(new LineComment("AssignExpr"));

  }

}

private static class BinaryExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(BinaryExpr n, Object arg) {

      n.setComment(new LineComment("BinaryExpr"));

  }

}

private static class BlockCommentVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(BlockComment n, Object arg) {

      n.setComment(new LineComment("BlockComment"));

  }

}

private static class BlockStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(BlockStmt n, Object arg) {

      n.setComment(new LineComment("BlockStmt"));

  }

}

private static class BooleanLiteralExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(BooleanLiteralExpr n, Object arg) {

      n.setComment(new LineComment("BooleanLiteralExpr"));

  }

}

private static class BreakStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(BreakStmt n, Object arg) {

      n.setComment(new LineComment("BreakStmt"));

  }

}

private static class CastExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(CastExpr n, Object arg) {

      n.setComment(new LineComment("CastExpr"));

  }

}

private static class CatchClauseVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(CatchClause n, Object arg) {

      n.setComment(new LineComment("CatchClause"));

  }

}

private static class CharLiteralExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(CharLiteralExpr n, Object arg) {

      n.setComment(new LineComment("CharLiteralExpr"));

  }

}

private static class ClassExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ClassExpr n, Object arg) {

      n.setComment(new LineComment("ClassExpr"));

  }

}

private static class ClassOrInterfaceDeclarationVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ClassOrInterfaceDeclaration n, Object arg) {

      n.setComment(new LineComment("ClassOrInterfaceDeclaration"));

  }

}

private static class ClassOrInterfaceTypeVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ClassOrInterfaceType n, Object arg) {

      n.setComment(new LineComment("ClassOrInterfaceType"));

  }

}

private static class CompilationUnitVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(CompilationUnit n, Object arg) {

      n.setComment(new LineComment("CompilationUnit"));

  }

}

private static class ConditionalExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ConditionalExpr n, Object arg) {

      n.setComment(new LineComment("ConditionalExpr"));

  }

}

private static class ConstructorDeclarationVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ConstructorDeclaration n, Object arg) {

      n.setComment(new LineComment("ConstructorDeclaration"));

  }

}

private static class ContinueStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ContinueStmt n, Object arg) {

      n.setComment(new LineComment("ContinueStmt"));

  }

}

private static class DoStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(DoStmt n, Object arg) {

      n.setComment(new LineComment("DoStmt"));

  }

}

private static class DoubleLiteralExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(DoubleLiteralExpr n, Object arg) {

      n.setComment(new LineComment("DoubleLiteralExpr"));

  }

}

private static class EmptyMemberDeclarationVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(EmptyMemberDeclaration n, Object arg) {

      n.setComment(new LineComment("EmptyMemberDeclaration"));

  }

}

private static class EmptyStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(EmptyStmt n, Object arg) {

      n.setComment(new LineComment("EmptyStmt"));

  }

}

private static class EmptyTypeDeclarationVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(EmptyTypeDeclaration n, Object arg) {

      n.setComment(new LineComment("EmptyTypeDeclaration"));

  }

}

private static class EnclosedExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(EnclosedExpr n, Object arg) {

      n.setComment(new LineComment("EnclosedExpr"));

  }

}

private static class EnumConstantDeclarationVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(EnumConstantDeclaration n, Object arg) {

      n.setComment(new LineComment("EnumConstantDeclaration"));

  }

}

private static class EnumDeclarationVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(EnumDeclaration n, Object arg) {

      n.setComment(new LineComment("EnumDeclaration"));

  }

}

private static class ExplicitConstructorInvocationStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ExplicitConstructorInvocationStmt n, Object arg) {

      n.setComment(new LineComment("ExplicitConstructorInvocationStmt"));

  }

}

private static class ExpressionStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ExpressionStmt n, Object arg) {

      n.setComment(new LineComment("ExpressionStmt"));

  }

}

private static class FieldAccessExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(FieldAccessExpr n, Object arg) {

      n.setComment(new LineComment("FieldAccessExpr"));

  }

}

private static class FieldDeclarationVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(FieldDeclaration n, Object arg) {

      n.setComment(new LineComment("FieldDeclaration"));

  }

}

private static class ForeachStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ForeachStmt n, Object arg) {

      n.setComment(new LineComment("ForeachStmt"));

  }

}

private static class ForStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ForStmt n, Object arg) {

      n.setComment(new LineComment("ForStmt"));

  }

}

private static class IfStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(IfStmt n, Object arg) {

      n.setComment(new LineComment("IfStmt"));

  }

}

private static class ImportDeclarationVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ImportDeclaration n, Object arg) {

      n.setComment(new LineComment("ImportDeclaration"));

  }

}

private static class InitializerDeclarationVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(InitializerDeclaration n, Object arg) {

      n.setComment(new LineComment("InitializerDeclaration"));

  }

}

private static class InstanceOfExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(InstanceOfExpr n, Object arg) {

      n.setComment(new LineComment("InstanceOfExpr"));

  }

}

private static class IntegerLiteralExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(IntegerLiteralExpr n, Object arg) {

      n.setComment(new LineComment("IntegerLiteralExpr"));

  }

}

private static class IntegerLiteralMinValueExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(IntegerLiteralMinValueExpr n, Object arg) {

      n.setComment(new LineComment("IntegerLiteralMinValueExpr"));

  }

}

private static class JavadocCommentVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(JavadocComment n, Object arg) {

      n.setComment(new LineComment("JavadocComment"));

  }

}

private static class LabeledStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(LabeledStmt n, Object arg) {

      n.setComment(new LineComment("LabeledStmt"));

  }

}

private static class LineCommentVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(LineComment n, Object arg) {

      n.setComment(new LineComment("LineComment"));

  }

}

private static class LongLiteralExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(LongLiteralExpr n, Object arg) {

      n.setComment(new LineComment("LongLiteralExpr"));

  }

}

private static class LongLiteralMinValueExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(LongLiteralMinValueExpr n, Object arg) {

      n.setComment(new LineComment("LongLiteralMinValueExpr"));

  }

}

private static class MarkerAnnotationExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(MarkerAnnotationExpr n, Object arg) {

      n.setComment(new LineComment("MarkerAnnotationExpr"));

  }

}

private static class MemberValuePairVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(MemberValuePair n, Object arg) {

      n.setComment(new LineComment("MemberValuePair"));

  }

}

private static class MethodCallExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(MethodCallExpr n, Object arg) {

      n.setComment(new LineComment("MethodCallExpr"));

  }

}

private static class MethodDeclarationVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(MethodDeclaration n, Object arg) {

      n.setComment(new LineComment("MethodDeclaration"));

  }

}

private static class NameExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(NameExpr n, Object arg) {

      n.setComment(new LineComment("NameExpr"));

  }

}

private static class NormalAnnotationExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(NormalAnnotationExpr n, Object arg) {

      n.setComment(new LineComment("NormalAnnotationExpr"));

  }

}

private static class NullLiteralExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(NullLiteralExpr n, Object arg) {

      n.setComment(new LineComment("NullLiteralExpr"));

  }

}

private static class ObjectCreationExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ObjectCreationExpr n, Object arg) {

      n.setComment(new LineComment("ObjectCreationExpr"));

  }

}

private static class PackageDeclarationVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(PackageDeclaration n, Object arg) {

      n.setComment(new LineComment("PackageDeclaration"));

  }

}

private static class ParameterVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(Parameter n, Object arg) {

      n.setComment(new LineComment("Parameter"));

  }

}

private static class PrimitiveTypeVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(PrimitiveType n, Object arg) {

      n.setComment(new LineComment("PrimitiveType"));

  }

}

private static class QualifiedNameExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(QualifiedNameExpr n, Object arg) {

      n.setComment(new LineComment("QualifiedNameExpr"));

  }

}

private static class ReferenceTypeVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ReferenceType n, Object arg) {

      n.setComment(new LineComment("ReferenceType"));

  }

}

private static class ReturnStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ReturnStmt n, Object arg) {

      n.setComment(new LineComment("ReturnStmt"));

  }

}

private static class SingleMemberAnnotationExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(SingleMemberAnnotationExpr n, Object arg) {

      n.setComment(new LineComment("SingleMemberAnnotationExpr"));

  }

}

private static class StringLiteralExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(StringLiteralExpr n, Object arg) {

      n.setComment(new LineComment("StringLiteralExpr"));

  }

}

private static class SuperExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(SuperExpr n, Object arg) {

      n.setComment(new LineComment("SuperExpr"));

  }

}

private static class SwitchEntryStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(SwitchEntryStmt n, Object arg) {

      n.setComment(new LineComment("SwitchEntryStmt"));

  }

}

private static class SwitchStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(SwitchStmt n, Object arg) {

      n.setComment(new LineComment("SwitchStmt"));

  }

}

private static class SynchronizedStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(SynchronizedStmt n, Object arg) {

      n.setComment(new LineComment("SynchronizedStmt"));

  }

}

private static class ThisExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ThisExpr n, Object arg) {

      n.setComment(new LineComment("ThisExpr"));

  }

}

private static class ThrowStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(ThrowStmt n, Object arg) {

      n.setComment(new LineComment("ThrowStmt"));

  }

}

private static class TryStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(TryStmt n, Object arg) {

      n.setComment(new LineComment("TryStmt"));

  }

}

private static class TypeDeclarationStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(TypeDeclarationStmt n, Object arg) {

      n.setComment(new LineComment("TypeDeclarationStmt"));

  }

}

private static class TypeParameterVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(TypeParameter n, Object arg) {

      n.setComment(new LineComment("TypeParameter"));

  }

}

private static class UnaryExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(UnaryExpr n, Object arg) {

      n.setComment(new LineComment("UnaryExpr"));

  }

}

private static class VariableDeclarationExprVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(VariableDeclarationExpr n, Object arg) {

      n.setComment(new LineComment("VariableDeclarationExpr"));

  }

}

private static class VariableDeclaratorVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(VariableDeclarator n, Object arg) {

      n.setComment(new LineComment("VariableDeclarator"));

  }

}

private static class VariableDeclaratorIdVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(VariableDeclaratorId n, Object arg) {

      n.setComment(new LineComment("VariableDeclaratorId"));

  }

}

private static class VoidTypeVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(VoidType n, Object arg) {

      n.setComment(new LineComment("VoidType"));

  }

}

private static class WhileStmtVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(WhileStmt n, Object arg) {

      n.setComment(new LineComment("WhileStmt"));

  }

}

private static class WildcardTypeVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(WildcardType n, Object arg) {

      n.setComment(new LineComment("WildcardType"));

  }

}

private static class IndexUnitVisitor extends VoidVisitorAdapter {

  @Override
  public void visit(IndexUnit n, Object arg) {

      n.setComment(new LineComment("IndexUnit"));

  }

}

